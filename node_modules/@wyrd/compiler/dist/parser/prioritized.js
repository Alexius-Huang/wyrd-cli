"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var utils_1 = require("./utils");
var error_1 = require("./error");
var constants_1 = require("./constants");
var invocation_1 = require("./method/invocation");
function parsePrioritizedExpr(tt, parseExpr, scope, prevExpr) {
    tt.next(); // Skip the lparen token
    var result = {
        type: 'PrioritizedExpr',
        expr: constants_1.EmptyExpression,
        return: utils_1.DataType.Invalid,
    };
    while (tt.isNotOneOf('rparen', 'comma')) {
        result.expr = parseExpr(result, { scope: scope });
        tt.next();
    }
    if (prevExpr !== undefined) {
        if (prevExpr.type === 'BinaryOpExpr') {
            prevExpr.expr2 = result;
            var operator = prevExpr.operator;
            var opLeft = prevExpr.expr1.return;
            var opRight = result.return;
            var operatorObj = scope.getOperatorPattern(operator, opLeft, opRight);
            if (operatorObj === undefined)
                error_1.ParserError("Invalid operation for operator `" + prevExpr.operator + "` with operands of type `" + opLeft + "` and `" + opRight + "`");
            prevExpr.return = operatorObj.returnDataType;
            return prevExpr;
        }
        if (prevExpr.type === 'PrioritizedExpr') {
            prevExpr.expr = result;
            prevExpr.return = result.return;
            while (tt.peekIs('dot')) {
                tt.next();
                result = invocation_1.parseMethodInvokeExpr(tt, parseExpr, scope, result);
            }
            return result;
        }
        if (prevExpr.type === 'NotExpr') {
            prevExpr.expr = result;
            return result;
        }
        error_1.ParserError("Unhandled parsing prioritized expression based on expression of type `" + prevExpr.type + "`");
    }
    result.return = result.expr.return;
    while (tt.peekIs('dot')) {
        tt.next();
        result = invocation_1.parseMethodInvokeExpr(tt, parseExpr, scope, result);
    }
    return result;
}
exports.parsePrioritizedExpr = parsePrioritizedExpr;
