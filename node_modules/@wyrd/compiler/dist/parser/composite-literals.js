"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var utils_1 = require("./utils");
var error_1 = require("./error");
function parseListLiteral(tt, parseExpr, scope, prevExpr) {
    tt.next(); // Skip lbracket
    var result = {
        type: 'ListLiteral',
        values: [],
        elementType: utils_1.DataType.Invalid,
        return: utils_1.DataType.Invalid,
    };
    // Fetch the first element
    var el = parseExpr(undefined, { scope: scope });
    result.values.push(el);
    result.elementType = el.return;
    result.return = utils_1.DataType.ListOf(el.return);
    tt.next();
    // Fetch the rest of the elements until meet `rbracket` token
    while (tt.isNot('rbracket')) {
        var el_1 = parseExpr(undefined, { scope: scope });
        error_1.ParserErrorIf(el_1.return.isNotEqualTo(result.elementType), "Expect List to contain of type `" + result.elementType + "`, instead mixed with type `" + el_1.return + "`");
        // Since the expression will be already separated by comma
        // We can strip down the prioritized expression layer
        if (el_1.type === 'PrioritizedExpr')
            el_1 = el_1.expr;
        result.values.push(el_1);
        tt.next();
    }
    return result;
}
exports.parseListLiteral = parseListLiteral;
