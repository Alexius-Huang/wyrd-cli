"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var utils_1 = require("./utils");
var error_1 = require("./error");
var constants_1 = require("./constants");
function parseVarDeclaration(tt, parseExpr, scope) {
    tt.next(); // Skip keyword `mutable`
    error_1.ParserErrorIf(tt.isNot('ident'), "Expect next token to be an `ident` to represent the mutable variable's name, got " + tt.type);
    var varName = tt.value;
    checkIfVariableIsAlreadyDeclared(scope, varName);
    tt.next(); // Skip the `ident` token which is the name of the variable
    var result = {
        type: 'VarDeclaration',
        expr1: { type: 'IdentLiteral', value: varName, return: utils_1.DataType.Invalid },
        expr2: constants_1.EmptyExpression,
        return: utils_1.DataType.Void
    };
    /* Handle Maybe Types */
    if (tt.is('keyword') && tt.valueIs('maybe'))
        return handleMaybeTypeDeclaration(tt, parseExpr, scope, result);
    error_1.ParserErrorIf(tt.isNot('eq'), "Expect next token to be `eq`, got " + tt.type);
    tt.next(); // Skip the `eq` token
    var subAST = [];
    while (tt.isNot('newline')) {
        var expr = parseExpr(undefined, { scope: scope, ast: subAST });
        subAST.push(expr);
        if (tt.is('newline') || !tt.hasNext())
            break;
        tt.next();
    }
    result.expr2 = subAST.pop();
    var isInvalid = utils_1.DataType.isInvalid(result.expr2.return);
    var isVoid = utils_1.DataType.isVoid(result.expr2.return);
    error_1.ParserErrorIf(isInvalid || isVoid, "Expect variable `" + varName + "` not declared as type 'Invalid' or 'Void'");
    result.expr1.return = result.expr2.return;
    scope.createMutableVariable(varName, result.expr1.return);
    return result;
}
exports.parseVarDeclaration = parseVarDeclaration;
function checkIfVariableIsAlreadyDeclared(scope, varName) {
    if (scope.hasVariable(varName)) {
        var varInfo = scope.getVariable(varName);
        if (varInfo.isConst) {
            error_1.ParserError("Constant `" + varName + "` cannot be redeclared as variable");
        }
        else {
            error_1.ParserError("Variable `" + varName + "` cannot be redeclared again");
        }
    }
}
function handleMaybeTypeDeclaration(tt, parseExpr, scope, prevExpr) {
    var result = __assign({}, prevExpr);
    var varName = result.expr1.value;
    tt.next(); // Skip the `maybe` keyword
    // TODO: Support list, records or in future, support tuple
    if (tt.is('builtin-type'))
        result.expr1.return = new utils_1.DataType(tt.value, true);
    else if (tt.is('ident') && scope.hasRecord(tt.value))
        result.expr1.return = scope.getRecord(tt.value).type.toNullable();
    else
        error_1.ParserError('Currently Wyrd-Lang only support builtin-types as maybe types');
    var varInfo = scope.createMutableVariable(varName, result.expr1.return);
    tt.next();
    if (tt.is('newline')) {
        result.expr2 = { type: 'NullLiteral', value: 'Null', return: utils_1.DataType.Null };
        return result;
    }
    error_1.ParserErrorIf(tt.isNot('eq'), "Expect next token to be `eq`, got " + tt.type);
    tt.next(); // Skip the `eq` token
    var subAST = [];
    while (tt.isNot('newline')) {
        var expr = parseExpr(undefined, { scope: scope, ast: subAST });
        subAST.push(expr);
        if (tt.is('newline') || !tt.hasNext())
            break;
        tt.next();
    }
    result.expr2 = subAST.pop();
    var isInvalid = utils_1.DataType.isInvalid(result.expr2.return);
    var isVoid = utils_1.DataType.isVoid(result.expr2.return);
    error_1.ParserErrorIf(isInvalid || isVoid, "Expect variable `" + varName + "` not declared as type 'Invalid' or 'Void'");
    error_1.ParserErrorIf(!result.expr2.return.isAssignableTo(varInfo.type), "Expect mutable variable `" + varName + "` to assign value of type `" + varInfo.type + "`, instead got: `" + result.expr2.return + "`");
    return result;
}
