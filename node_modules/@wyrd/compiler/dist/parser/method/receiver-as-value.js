"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var utils_1 = require("../utils");
var error_1 = require("../error");
var parameters_1 = require("../function/parameters");
/**
 *  Basic case of invoking method from values, for instance: 123.toStr()
 */
function parseReceiverAsValue(tt, parseExpr, scope, prevExpr) {
    var result = {
        type: 'MethodInvokeExpr',
        name: 'UNDECIDED',
        receiver: prevExpr,
        params: [],
        return: utils_1.DataType.Invalid,
    };
    var methodName = prevExpr.return.type + "." + tt.value;
    tt.next(); // Skip the name of the method
    error_1.ParserErrorIf(tt.isNot('lparen'), "Expect method `" + methodName + "` invocation should follow with token `lparen`");
    tt.next(); // Skip the left parentheses
    error_1.ParserErrorIf(tt.is('comma'), "Expect next token is an expression as parameter of method `" + methodName + "`, instead got `comma`");
    if (tt.isNot('rparen'))
        result.params = parameters_1.parseParameters(tt, parseExpr, scope);
    // Strip down the prioritized layer since the receiver will always be a single node
    if (result.receiver.type === 'PrioritizedExpr')
        result.receiver = result.receiver.expr;
    return result;
}
exports.parseReceiverAsValue = parseReceiverAsValue;
