"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var utils_1 = require("../utils");
var constants_1 = require("../constants");
var error_1 = require("../error");
function parseRecordDeclaration(tt, parseExpr, scope) {
    tt.next(); // Skip the `record` keyword
    if (tt.isNot('ident'))
        error_1.ParserError("Expect to give the name of the record, instead got token of type: `" + tt.type + "`");
    var name = tt.value;
    if (scope.canBeNamedAs(name))
        error_1.ParserError("Cannot declare record `" + name + "`, since the name has already been used");
    tt.next(); // Skip `ident`
    if (tt.isNot('lcurly'))
        error_1.ParserError("Expect token of type `lcurly`, instead got: `" + tt.type + "`");
    tt.next(); // Skip `{`
    var record = scope.createRecord(name);
    parseRecordDefinition(tt, parseExpr, record);
    return constants_1.VoidExpression;
}
exports.parseRecordDeclaration = parseRecordDeclaration;
function parseRecordDefinition(tt, parseExpr, record) {
    if (tt.is('rcurly'))
        error_1.ParserError("Expect record declaration `" + record.name + "` is not blank");
    while (true) {
        // TODO: Support type other than builtin-type
        if (tt.isNot('builtin-type'))
            error_1.ParserError("Expect record `" + record.name + "` to declare the type of the property first, instead got token of type `" + tt.type + "`");
        var t = new utils_1.DataType(tt.value);
        tt.next(); // Skip `type` declaration
        if (tt.isNot('ident'))
            error_1.ParserError("Expect record `" + record.name + "` to declare the name of the property after type declaration, instead got token of type `" + tt.type + "`");
        var v = tt.value;
        tt.next(); // Skip `ident`
        record.setProperty(t, v);
        if (tt.isNot('comma')) {
            if (tt.is('rcurly'))
                break;
            error_1.ParserError("Expect more definition of record `" + record.name + "` to dilimited by comma, instead got token of type `" + tt.type + "`");
        }
        tt.next(); // Skip comma
    }
    return record;
}
