"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var utils_1 = require("../utils");
var constants_1 = require("../constants");
var error_1 = require("../error");
function parseRecordLiteral(tt, parseExpr, scope, prevExpr) {
    var recordName = tt.value;
    tt.next(); // Skip `ident`
    var result = {
        type: 'RecordLiteral',
        properties: [],
        return: new utils_1.DataType(recordName),
    };
    if (tt.isNot('lcurly'))
        error_1.ParserError("Expect left curly brace after record type, instead got token of type `" + tt.type + "`");
    tt.next(); // Skip `{`
    var recordDef = scope.getRecord(recordName);
    var requiredPropertySet = new Set(recordDef.propertySet);
    while (true) {
        if (tt.isNot('ident'))
            error_1.ParserError("Expect to have property name of record `" + recordName + "`, instead got token of type `" + tt.type + "`");
        var propName = tt.value;
        tt.next(); // Skip `ident`
        if (tt.isNot('colon'))
            error_1.ParserError("Expect key-value pairs of record `" + recordName + "` to dilimited by `colon`, instead got token of type `" + tt.type + "`");
        tt.next(); // Skip `colon`
        if (requiredPropertySet.has(propName)) {
            requiredPropertySet.delete(propName);
            var propDef = recordDef.getProperty(propName);
            var propValue = {
                name: propName,
                type: propDef.type,
                value: constants_1.EmptyExpression,
            };
            var propValueExpr = constants_1.EmptyExpression;
            while (true) {
                propValueExpr = parseExpr();
                tt.next();
                if (tt.is('comma') || tt.is('rcurly'))
                    break;
            }
            if (propValueExpr.return.isNotEqualTo(propValue.type))
                error_1.ParserError("Expect property `" + propName + "` in record `" + recordDef.name + "` to receive value of type `" + propDef.type + "`, instead got value of type `" + propValueExpr.return + "`");
            propValue.value = propValueExpr;
            result.properties.push(propValue);
        }
        else {
            error_1.ParserError("Property `" + propName + "` isn't exist in definition of record `" + recordName + "`");
        }
        if (tt.isNot('comma') && tt.is('rcurly'))
            break;
        tt.next(); // Skip comma
    }
    if (requiredPropertySet.size !== 0) {
        var formattedStr = Array.from(requiredPropertySet).map(function (v) { return "`" + v + "`"; }).join(', ');
        error_1.ParserError("Property of record `" + recordName + "` is missing: " + formattedStr);
    }
    return result;
}
exports.parseRecordLiteral = parseRecordLiteral;
