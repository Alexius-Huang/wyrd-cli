import { Parameter, DataType as DT, GenericType as GT, ScopeVariable as Variable, ScopeFunctionObject as FunctionObject, FunctionPattern, ScopeMethodType as MethodType, ScopeMethodObject as MethodObject, ScopeOperatorObject as OperatorObject, OperatorPattern, ScopeRecord as Record } from '.';
import { GenericPlacholder } from '../../types';
export default class Scope {
    parent: null | Scope;
    children: Map<string, Scope>;
    variables: Map<string, Variable>;
    functions: Map<string, FunctionObject>;
    methods: Map<string, MethodType>;
    operators: Map<string, OperatorObject>;
    records: Map<string, Record>;
    declaredGenerics: Map<string, GT>;
    genericPlacholders: Map<string, GenericPlacholder>;
    createChildScope(name: string): Scope;
    canBeNamedAs(name: string): boolean;
    hasVariable(name: string): boolean;
    getVariable(name: string): Variable;
    createConstant(name: string, type?: DT): Variable;
    createMutableVariable(name: string, type?: DT): Variable;
    hasFunction(name: string): boolean;
    getFunction(name: string): FunctionObject;
    getFunctionPattern(name: string, parameter: Parameter): FunctionPattern;
    createFunction(name: string): FunctionObject;
    hasMethod(receiver: DT, name: string): boolean;
    getMethod(receiver: DT, name: string): MethodObject;
    getMethodPattern(receiver: DT, name: string, parameter: Parameter): import("./Scope.MethodObject").MethodPattern | undefined;
    createMethod(receiver: DT, name: string): MethodObject;
    hasOperator(name: string): boolean;
    getOperator(op: string): OperatorObject;
    getOperatorPattern(op: string, opType1: DT, opType2: DT): OperatorPattern | undefined;
    createOperator(op: string): OperatorObject;
    hasRecord(name: string): boolean;
    getRecord(name: string): Record;
    createRecord(name: string): Record;
    declareGenericType(name: string): GT;
    hasGenericType(name: string): boolean;
    getGenericType(name: string): GT;
    createGenericPlaceholder(placeholder: string, name: string): GenericPlacholder;
    hasGenericPlaceholder(placeholder: string): boolean;
    getGenericPlaceholder(placeholder: string): GenericPlacholder;
    getGenericTypeFromPlaceholder(placeholder: string): DT;
}
