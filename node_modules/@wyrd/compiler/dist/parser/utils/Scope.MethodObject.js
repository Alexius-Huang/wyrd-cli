"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var MethodObject = /** @class */ (function () {
    function MethodObject(name) {
        this.name = name;
        this.patterns = [];
        this.patternIndex = 0;
    }
    MethodObject.prototype.createNewPattern = function (parameter, outputType, options) {
        var _a, _b;
        var mappedName = (_a = options === null || options === void 0 ? void 0 : options.directMapping) !== null && _a !== void 0 ? _a : this.name;
        var isNotBuiltin = (_b = options === null || options === void 0 ? void 0 : options.isNotBuiltin) !== null && _b !== void 0 ? _b : true;
        var referenceName = this.patternIndex === 0 || !isNotBuiltin ? mappedName : mappedName + "_" + this.patternIndex;
        var pattern = new MethodPattern(referenceName, parameter, outputType);
        this.patterns.push(pattern);
        this.patternIndex++;
        pattern.isNotBuiltin = isNotBuiltin;
        return pattern;
    };
    MethodObject.prototype.getPatternInfo = function (receiver, parameter) {
        for (var i = 0; i < this.patterns.length; i += 1) {
            var p = this.patterns[i].parameter;
            if (p.matches(parameter, receiver))
                return this.patterns[i];
        }
        return undefined;
    };
    return MethodObject;
}());
exports.default = MethodObject;
var MethodPattern = /** @class */ (function () {
    function MethodPattern(_name, parameter, returnDataType) {
        this._name = _name;
        this.parameter = parameter;
        this.returnDataType = returnDataType;
        this.overridenIndex = 0;
        this.isNotBuiltin = true;
    }
    Object.defineProperty(MethodPattern.prototype, "name", {
        get: function () {
            return this.overridenIndex === 0 ? this._name : this._name + "$" + this.overridenIndex;
        },
        enumerable: true,
        configurable: true
    });
    MethodPattern.prototype.override = function () {
        this.overridenIndex++;
    };
    return MethodPattern;
}());
exports.MethodPattern = MethodPattern;
