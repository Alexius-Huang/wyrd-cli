"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var exceptions_1 = require("../exceptions");
var TokenTracker = /** @class */ (function () {
    function TokenTracker(tokens) {
        this.tokens = tokens;
        this.index = 0;
    }
    Object.defineProperty(TokenTracker.prototype, "current", {
        get: function () { return this.tokens[this.index]; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TokenTracker.prototype, "type", {
        get: function () { return this.current.type; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TokenTracker.prototype, "value", {
        get: function () { return this.current.value; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TokenTracker.prototype, "peek", {
        get: function () { var _a; return (_a = this.tokens[this.index + 1]) !== null && _a !== void 0 ? _a : null; },
        enumerable: true,
        configurable: true
    });
    TokenTracker.prototype.next = function () {
        if (!this.hasNext())
            throw exceptions_1.NoTokenLeftException;
        this.index += 1;
        return this.current;
    };
    TokenTracker.prototype.is = function (type) {
        return this.current.type === type;
    };
    TokenTracker.prototype.valueIs = function (value) {
        return this.current.value === value;
    };
    TokenTracker.prototype.peekValueIs = function (value) {
        var _a;
        return ((_a = this.peek) === null || _a === void 0 ? void 0 : _a.value) === value;
    };
    TokenTracker.prototype.isNot = function (type) {
        return this.current.type !== type;
    };
    TokenTracker.prototype.valueIsNot = function (value) {
        return this.current.value !== value;
    };
    TokenTracker.prototype.isOneOf = function () {
        var types = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            types[_i] = arguments[_i];
        }
        return types.indexOf(this.current.type) !== -1;
    };
    TokenTracker.prototype.valueIsOneOf = function () {
        var values = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            values[_i] = arguments[_i];
        }
        return values.indexOf(this.current.value) !== -1;
    };
    TokenTracker.prototype.peekValueIsOneOf = function () {
        var values = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            values[_i] = arguments[_i];
        }
        var _a;
        if (this.peek !== null)
            return values.indexOf((_a = this.peek) === null || _a === void 0 ? void 0 : _a.value) !== -1;
        return false;
    };
    TokenTracker.prototype.isNotOneOf = function () {
        var types = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            types[_i] = arguments[_i];
        }
        return !this.isOneOf.apply(this, types);
    };
    TokenTracker.prototype.valueIsNotOneOf = function () {
        var values = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            values[_i] = arguments[_i];
        }
        return !this.valueIsOneOf.apply(this, values);
    };
    TokenTracker.prototype.peekIs = function (type) {
        if (!this.hasNext())
            return false;
        return this.peek.type === type;
    };
    TokenTracker.prototype.hasNext = function () {
        return this.index !== this.tokens.length - 1;
    };
    return TokenTracker;
}());
exports.default = TokenTracker;
