"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var OperatorObject = /** @class */ (function () {
    function OperatorObject(name) {
        this.name = name;
        this.patterns = [];
        this.patternIndex = 0;
    }
    OperatorObject.prototype.createNewPattern = function (opType1, opType2, outputType, options) {
        var _a;
        var referenceName = this.patternIndex === 0 ? this.name : this.name + "_" + this.patternIndex;
        var pattern = new OperatorPattern(referenceName, opType1, opType2, outputType);
        this.patterns.push(pattern);
        this.patternIndex++;
        pattern.isNotBuiltin = (_a = options === null || options === void 0 ? void 0 : options.isNotBuiltin) !== null && _a !== void 0 ? _a : true;
        return pattern;
    };
    OperatorObject.prototype.getPatternInfo = function (opType1, opType2) {
        for (var i = 0; i < this.patterns.length; i += 1) {
            var p = this.patterns[i];
            if (p.opType1.isEqualTo(opType1) && p.opType2.isEqualTo(opType2))
                return p;
        }
        return undefined;
    };
    return OperatorObject;
}());
exports.default = OperatorObject;
var OperatorPattern = /** @class */ (function () {
    function OperatorPattern(_name, opType1, opType2, returnDataType) {
        this._name = _name;
        this.opType1 = opType1;
        this.opType2 = opType2;
        this.returnDataType = returnDataType;
        this.overridenIndex = 0;
        this.isNotBuiltin = true;
    }
    Object.defineProperty(OperatorPattern.prototype, "name", {
        get: function () {
            return this.overridenIndex === 0 ? this._name : this._name + "$" + this.overridenIndex;
        },
        enumerable: true,
        configurable: true
    });
    OperatorPattern.prototype.override = function () {
        this.overridenIndex++;
    };
    return OperatorPattern;
}());
exports.OperatorPattern = OperatorPattern;
