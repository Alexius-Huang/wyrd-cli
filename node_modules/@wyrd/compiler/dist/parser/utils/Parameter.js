"use strict";
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var error_1 = require("../error");
var Parameter = /** @class */ (function () {
    function Parameter() {
        var types = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            types[_i] = arguments[_i];
        }
        this.list = types;
    }
    Parameter.of = function () {
        var types = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            types[_i] = arguments[_i];
        }
        return new (Parameter.bind.apply(Parameter, __spreadArrays([void 0], types)))();
    };
    Parameter.from = function (types) {
        return new (Parameter.bind.apply(Parameter, __spreadArrays([void 0], types)))();
    };
    Parameter.Void = function () {
        return new Parameter();
    };
    Object.defineProperty(Parameter.prototype, "length", {
        get: function () { return this.list.length; },
        enumerable: true,
        configurable: true
    });
    Parameter.prototype.toString = function () {
        if (this.list.length === 0)
            return 'Void';
        return this.list.map(function (dt) { return dt.toString(); }).join('.');
    };
    Parameter.prototype.matches = function (p, receiver) {
        var pList = p.list;
        if (pList.length !== this.list.length)
            return false;
        var typeParameterMap = receiver ? receiver.typeParameterMap : {};
        for (var i = 0; i < this.list.length; i += 1) {
            var required = this.list[i];
            if (required.isGeneric) {
                if (pList[i].isNotEqualTo(typeParameterMap[required.type]))
                    return false;
            }
            else if (required.hasTypeParameters()) {
                if (receiver === undefined)
                    error_1.ParserError('Receiver cannot be undefined');
                if (pList[i].isNotEqualTo(required.applyTypeParametersFrom(receiver)))
                    return false;
            }
            else if (pList[i].isNotEqualTo(required)) {
                return false;
            }
        }
        return true;
    };
    return Parameter;
}());
exports.default = Parameter;
