"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var utils_1 = require("./utils");
var error_1 = require("./error");
var parameters_1 = require("./function/parameters");
function parseFunctionInvokeExpr(tt, parseExpr, scope, prevExpr) {
    var name = tt.value;
    var result = {
        type: 'FunctionInvokeExpr',
        name: '',
        params: [],
        return: utils_1.DataType.Unknown,
    };
    tt.next(); // Skip the name of the function
    error_1.ParserErrorIf(tt.isNot('lparen'), "Expect function `" + name + "` invocation should follow with token `lparen`");
    tt.next(); // Skip the left parentheses
    error_1.ParserErrorIf(tt.is('comma'), "Expect next token is an expression as parameter of function `" + name + "`, instead got `comma`");
    if (tt.isNot('rparen'))
        result.params = parameters_1.parseParameters(tt, parseExpr, scope);
    var inputParameter = utils_1.Parameter.from(result.params.map(function (expr) { return expr.return; }));
    var patternInfo = scope.getFunctionPattern(name, inputParameter);
    result.name = patternInfo.name;
    result.return = patternInfo.returnDataType;
    return result;
}
exports.parseFunctionInvokeExpr = parseFunctionInvokeExpr;
