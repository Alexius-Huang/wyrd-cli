"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var fs = __importStar(require("fs"));
var path = __importStar(require("path"));
var lexer_1 = require("../lexer");
var include_library_1 = require("../include-library");
var error_1 = require("./error");
var constants_1 = require("./constants");
function parseImportExpr(tt, parse, scope, rootDir) {
    tt.next(); // skip 'import'
    if (tt.isNot('string'))
        error_1.ParserError("Expect token after `import` keyword is `file path` or `library name`, instead got token of type: `" + tt.type + "`");
    if (constants_1.BuiltinLibs.has(tt.value)) {
        var libName = tt.value;
        tt.next();
        return include_library_1.includeLibrary(libName, scope);
    }
    var filePath = path.join(rootDir, tt.value);
    if (!fs.existsSync(filePath))
        error_1.ParserError("Importing unexisted file `" + filePath + "`");
    var isLib = /\.lib\.wyrd/.test(filePath);
    var content = fs.readFileSync(filePath, 'utf-8');
    tt.next(); // skip file path represented by 'string'
    return parse(lexer_1.lex(content), {
        rootDir: path.dirname(filePath),
        defaultScope: scope,
        isLib: isLib,
    });
}
exports.parseImportExpr = parseImportExpr;
