"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var error_1 = require("../error");
var _1 = require(".");
function parseElseIfExpression(tt, parseExpr, scope, prevExpr) {
    var result = __assign({}, prevExpr);
    result.expr2 = _1.parseConditionalExpr(tt, parseExpr, scope);
    /*
     *  Case when elif-expression has no else expression further,
     *  the overall conditional expression should be converted to maybe types
     */
    if (!result.return.nullable && result.expr2.return.nullable)
        result.return = result.return.toNullable();
    if (result.return.isNotEqualTo(result.expr2.return))
        error_1.ParserError('Expect values returned from different condition branch to be the same');
    return result;
}
exports.parseElseIfExpression = parseElseIfExpression;
