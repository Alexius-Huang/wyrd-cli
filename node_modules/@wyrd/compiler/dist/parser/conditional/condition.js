"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var utils_1 = require("../utils");
var error_1 = require("../error");
function parseCondition(tt, parseExpr, prevExpr) {
    var result = __assign({}, prevExpr);
    while (tt.isNot('arrow') && tt.valueIsNotOneOf('then', 'do')) {
        result.condition = parseExpr(result, { target: 'condition' });
        tt.next();
        error_1.ParserErrorIf(tt.is('newline'), 'Expect condition to end followed by arrow `=>` or the `then` keyword');
    }
    error_1.ParserErrorIf(result.condition === undefined, 'Expect to resolve a condition');
    if (result.condition.return.isNotEqualTo(utils_1.DataType.Bool))
        error_1.ParserError("Expect conditional expression's condition should return `Bool` type, instead got: `" + result.condition.return + "`");
    return result;
}
exports.parseCondition = parseCondition;
