"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var utils_1 = require("../utils");
var error_1 = require("../error");
function parseIfArrowExpr(tt, parseExpr, scope, prevExpr) {
    var result = __assign({}, prevExpr);
    tt.next(); // Skip '=>' inline-control operator
    while (tt.isNot('newline')) {
        result.expr1 = parseExpr(result.expr1, { target: 'expr1', scope: scope });
        tt.next();
    }
    result.return = result.expr1.return;
    return result;
}
exports.parseIfArrowExpr = parseIfArrowExpr;
function parseIfThenExpr(tt, parseExpr, scope, prevExpr) {
    var result = __assign({}, prevExpr);
    tt.next(); // Skip 'then' keyword
    error_1.ParserErrorIf(tt.isNot('newline'), 'Expect no tokens after `then` keyword');
    tt.next(); // Skip `newline`
    while (tt.isNot('newline')) {
        result.expr1 = parseExpr(result.expr1, { target: 'expr1', scope: scope });
        tt.next();
    }
    result.return = result.expr1.return;
    return result;
}
exports.parseIfThenExpr = parseIfThenExpr;
function parseIfBlockExpr(tt, parseExpr, scope, prevExpr) {
    var result = __assign({}, prevExpr);
    tt.next(); // Skip 'do' keyword
    error_1.ParserErrorIf(tt.isNot('newline'), 'Expect no tokens after `do` keyword');
    tt.next(); // Skip `newline`
    var blockExpr = {
        type: 'DoBlockExpr',
        body: [],
        return: utils_1.DataType.Unknown
    };
    var doBlockScope = scope.createChildScope('if-conditional-block');
    while (!(tt.peekIs('keyword') && tt.peekValueIsOneOf('else', 'elif', 'end'))) {
        if (tt.isNot('newline')) {
            var expr = parseExpr(undefined, { ast: blockExpr.body, scope: doBlockScope });
            expr.type !== 'VoidExpr' && blockExpr.body.push(expr);
        }
        tt.next();
    }
    if (blockExpr.body.length === 0)
        error_1.ParserError("Do-Block Expression cannot be blank");
    blockExpr.return = blockExpr.body[blockExpr.body.length - 1].return;
    result.expr1 = blockExpr;
    result.return = blockExpr.return;
    return result;
}
exports.parseIfBlockExpr = parseIfBlockExpr;
