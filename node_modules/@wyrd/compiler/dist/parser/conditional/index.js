"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var utils_1 = require("../utils");
var condition_1 = require("./condition");
var if_expression_1 = require("./if-expression");
var if_else_if_expression_1 = require("./if-else-if-expression");
var else_expression_1 = require("./else-expression");
var constants_1 = require("../constants");
var error_1 = require("../error");
function parseConditionalExpr(tt, parseExpr, scope) {
    var result = {
        type: 'ConditionalExpr',
        condition: constants_1.EmptyExpression,
        expr1: constants_1.EmptyExpression,
        expr2: constants_1.VoidExpression,
        return: utils_1.DataType.Unknown
    };
    tt.next(); // Skip 'if' | 'elif' keyword
    result = condition_1.parseCondition(tt, parseExpr, result);
    var expressionType;
    if (tt.is('arrow')) {
        result = if_expression_1.parseIfArrowExpr(tt, parseExpr, scope, result);
        expressionType = 'arrow';
    }
    else if (tt.valueIs('then')) {
        result = if_expression_1.parseIfThenExpr(tt, parseExpr, scope, result);
        expressionType = 'then';
    }
    else if (tt.valueIs('do')) {
        result = if_expression_1.parseIfBlockExpr(tt, parseExpr, scope, result);
        expressionType = 'do-block';
    }
    else
        error_1.ParserError("Unhandled conditional expression parsing with token of type `" + tt.type + "`");
    if (
    /* Without-Else expression and last line condition */
    !tt.hasNext() ||
        /* Without-else-expression condition */
        !(tt.peekIs('keyword') && tt.peekValueIsOneOf('elif', 'else'))) {
        result.return = result.return.toNullable();
        if (expressionType !== 'arrow' && tt.peekIs('keyword') && tt.peekValueIs('end'))
            tt.next(); // Skip `end` keyword
        return result;
    }
    tt.next(); // Skip `newline`
    if (tt.is('keyword') && tt.valueIs('elif'))
        return if_else_if_expression_1.parseElseIfExpression(tt, parseExpr, scope, result);
    if (tt.is('keyword') && tt.valueIs('else'))
        result = else_expression_1.parseElseExpression(tt, parseExpr, scope, result);
    if (result.expr2.return.isNotEqualTo(result.return))
        error_1.ParserError("Expect values returned from different condition branch to be the same");
    return result;
}
exports.parseConditionalExpr = parseConditionalExpr;
