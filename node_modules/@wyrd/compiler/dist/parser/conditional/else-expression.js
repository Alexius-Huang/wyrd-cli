"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var utils_1 = require("../utils");
var error_1 = require("../error");
function parseElseExpression(tt, parseExpr, scope, prevExpr) {
    var result = __assign({}, prevExpr);
    tt.next(); // Skip 'else' keyword
    if (tt.is('arrow'))
        result = parseElseArrowExpr(tt, parseExpr, scope, result);
    else if (tt.valueIs('then'))
        result = parseElseThenExpr(tt, parseExpr, scope, result);
    else if (tt.valueIs('do'))
        result = parseElseBlockExpr(tt, parseExpr, scope, result);
    else
        error_1.ParserError('Expect else condition to followed by arrow `=>`, `then` or `do` keyword');
    return result;
}
exports.parseElseExpression = parseElseExpression;
function parseElseArrowExpr(tt, parseExpr, scope, prevExpr) {
    var result = __assign({}, prevExpr);
    tt.next(); // Skip 'arrow' keyword
    while (tt.isNot('newline')) {
        result.expr2 = parseExpr(result, { target: 'expr2', scope: scope });
        tt.next();
    }
    return result;
}
function parseElseThenExpr(tt, parseExpr, scope, prevExpr) {
    var result = __assign({}, prevExpr);
    tt.next(); // Skip 'then' keyword
    if (tt.isNot('newline'))
        error_1.ParserError('Expect no tokens after `then` keyword');
    tt.next(); // Skip 'newline' token
    while (tt.isNot('newline')) {
        result.expr2 = parseExpr(result, { target: 'expr2', scope: scope });
        tt.next();
    }
    tt.next(); // Skip 'newline' token
    error_1.ParserErrorIf(tt.valueIsNot('end'), 'Expect `else then` expression to followed by an `end` keyword');
    tt.next(); // Skip 'end' token
    error_1.ParserErrorIf(tt.isNot('newline'), 'Expect no tokens after `end` keyword');
    return result;
}
function parseElseBlockExpr(tt, parseExpr, scope, prevExpr) {
    var result = __assign({}, prevExpr);
    tt.next(); // Skip 'do' keyword
    if (tt.isNot('newline'))
        error_1.ParserError('Expect no tokens after `do` keyword');
    tt.next(); // Skip 'newline' token
    var blockExpr = {
        type: 'DoBlockExpr',
        body: [],
        return: utils_1.DataType.Unknown
    };
    var doBlockScope = scope.createChildScope('if-conditional-block');
    while (tt.isNot('keyword') && tt.valueIsNot('end')) {
        if (tt.isNot('newline')) {
            var expr = parseExpr(undefined, { ast: blockExpr.body, scope: doBlockScope });
            expr.type !== 'VoidExpr' && blockExpr.body.push(expr);
        }
        tt.next();
    }
    if (blockExpr.body.length === 0)
        error_1.ParserError("Do-Block Expression cannot be blank");
    blockExpr.return = blockExpr.body[blockExpr.body.length - 1].return;
    result.expr2 = blockExpr;
    return result;
}
