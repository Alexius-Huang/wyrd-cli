"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var fs = __importStar(require("fs"));
var path = __importStar(require("path"));
var lexer_1 = require("./lexer");
exports.lex = lexer_1.lex;
var parser_1 = require("./parser");
exports.parse = parser_1.parse;
var include_library_1 = require("./include-library");
var utils_1 = require("./parser/utils");
var code_generator_1 = require("./code-generator");
exports.generateCode = code_generator_1.generateCode;
var builtin_operators_1 = __importDefault(require("./parser/builtin-operators"));
function compile(options) {
    var _a, _b, _c;
    var content, rootDir;
    if (options === null || options === void 0 ? void 0 : options.program)
        content = options.program;
    else if (options === null || options === void 0 ? void 0 : options.entry)
        content = fs.readFileSync(options === null || options === void 0 ? void 0 : options.entry, 'utf-8');
    else
        throw new Error('CompilerError: Must provide either the `entry` Wyrd file path or Wyrd program as `program` option');
    if (options === null || options === void 0 ? void 0 : options.entry)
        rootDir = path.dirname(options.entry);
    else
        rootDir = (_a = options === null || options === void 0 ? void 0 : options.dir) !== null && _a !== void 0 ? _a : __dirname;
    /* TODO: Load as library */
    var globalScope = new utils_1.Scope();
    var listGT = globalScope.declareGenericType('List');
    listGT.declareTypeParameter('element');
    globalScope = include_library_1.includeLibrary('Core', globalScope).scope;
    builtin_operators_1.default(globalScope);
    if (options === null || options === void 0 ? void 0 : options.scopeMiddleware)
        globalScope = options.scopeMiddleware(globalScope);
    var tokens = lexer_1.lex(content);
    var ast = parser_1.parse(tokens, {
        rootDir: rootDir,
        defaultScope: globalScope,
        mainFileOnly: (_b = options === null || options === void 0 ? void 0 : options.mainFileOnly) !== null && _b !== void 0 ? _b : false
    }).ast;
    if (options === null || options === void 0 ? void 0 : options.showAST)
        ast.forEach(function (n) { return console.log(n); });
    var minify = (_c = options === null || options === void 0 ? void 0 : options.minify) !== null && _c !== void 0 ? _c : false;
    var result = code_generator_1.generateCode(ast, { minify: minify });
    return { result: result, ast: ast };
}
exports.compile = compile;
